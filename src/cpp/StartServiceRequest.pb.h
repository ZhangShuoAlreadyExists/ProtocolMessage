// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StartServiceRequest.proto

#ifndef PROTOBUF_INCLUDED_StartServiceRequest_2eproto
#define PROTOBUF_INCLUDED_StartServiceRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_StartServiceRequest_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_StartServiceRequest_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_StartServiceRequest_2eproto();
namespace tutorial {
class StartServiceRequest;
class StartServiceRequestDefaultTypeInternal;
extern StartServiceRequestDefaultTypeInternal _StartServiceRequest_default_instance_;
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> ::tutorial::StartServiceRequest* Arena::CreateMaybeMessage<::tutorial::StartServiceRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tutorial {

// ===================================================================

class StartServiceRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.StartServiceRequest) */ {
 public:
  StartServiceRequest();
  virtual ~StartServiceRequest();

  StartServiceRequest(const StartServiceRequest& from);

  inline StartServiceRequest& operator=(const StartServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartServiceRequest(StartServiceRequest&& from) noexcept
    : StartServiceRequest() {
    *this = ::std::move(from);
  }

  inline StartServiceRequest& operator=(StartServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StartServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartServiceRequest* internal_default_instance() {
    return reinterpret_cast<const StartServiceRequest*>(
               &_StartServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StartServiceRequest* other);
  friend void swap(StartServiceRequest& a, StartServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartServiceRequest* New() const final {
    return CreateMaybeMessage<StartServiceRequest>(nullptr);
  }

  StartServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartServiceRequest& from);
  void MergeFrom(const StartServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string repo_url = 2;
  void clear_repo_url();
  static const int kRepoUrlFieldNumber = 2;
  const ::std::string& repo_url() const;
  void set_repo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_repo_url(::std::string&& value);
  #endif
  void set_repo_url(const char* value);
  void set_repo_url(const char* value, size_t size);
  ::std::string* mutable_repo_url();
  ::std::string* release_repo_url();
  void set_allocated_repo_url(::std::string* repo_url);

  // string version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string source = 10;
  void clear_source();
  static const int kSourceFieldNumber = 10;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string target = 11;
  void clear_target();
  static const int kTargetFieldNumber = 11;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // int32 sequence = 5;
  void clear_sequence();
  static const int kSequenceFieldNumber = 5;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.StartServiceRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr repo_url_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  ::google::protobuf::int32 sequence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_StartServiceRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartServiceRequest

// string service_name = 1;
inline void StartServiceRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:tutorial.StartServiceRequest.service_name)
  return service_name_.GetNoArena();
}
inline void StartServiceRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.StartServiceRequest.service_name)
}
#if LANG_CXX11
inline void StartServiceRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.StartServiceRequest.service_name)
}
#endif
inline void StartServiceRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.StartServiceRequest.service_name)
}
inline void StartServiceRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.StartServiceRequest.service_name)
}
inline ::std::string* StartServiceRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.StartServiceRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:tutorial.StartServiceRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartServiceRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.StartServiceRequest.service_name)
}

// string repo_url = 2;
inline void StartServiceRequest::clear_repo_url() {
  repo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartServiceRequest::repo_url() const {
  // @@protoc_insertion_point(field_get:tutorial.StartServiceRequest.repo_url)
  return repo_url_.GetNoArena();
}
inline void StartServiceRequest::set_repo_url(const ::std::string& value) {
  
  repo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.StartServiceRequest.repo_url)
}
#if LANG_CXX11
inline void StartServiceRequest::set_repo_url(::std::string&& value) {
  
  repo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.StartServiceRequest.repo_url)
}
#endif
inline void StartServiceRequest::set_repo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.StartServiceRequest.repo_url)
}
inline void StartServiceRequest::set_repo_url(const char* value, size_t size) {
  
  repo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.StartServiceRequest.repo_url)
}
inline ::std::string* StartServiceRequest::mutable_repo_url() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.StartServiceRequest.repo_url)
  return repo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartServiceRequest::release_repo_url() {
  // @@protoc_insertion_point(field_release:tutorial.StartServiceRequest.repo_url)
  
  return repo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartServiceRequest::set_allocated_repo_url(::std::string* repo_url) {
  if (repo_url != nullptr) {
    
  } else {
    
  }
  repo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repo_url);
  // @@protoc_insertion_point(field_set_allocated:tutorial.StartServiceRequest.repo_url)
}

// string version = 3;
inline void StartServiceRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartServiceRequest::version() const {
  // @@protoc_insertion_point(field_get:tutorial.StartServiceRequest.version)
  return version_.GetNoArena();
}
inline void StartServiceRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.StartServiceRequest.version)
}
#if LANG_CXX11
inline void StartServiceRequest::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.StartServiceRequest.version)
}
#endif
inline void StartServiceRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.StartServiceRequest.version)
}
inline void StartServiceRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.StartServiceRequest.version)
}
inline ::std::string* StartServiceRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.StartServiceRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartServiceRequest::release_version() {
  // @@protoc_insertion_point(field_release:tutorial.StartServiceRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartServiceRequest::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:tutorial.StartServiceRequest.version)
}

// string id = 4;
inline void StartServiceRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartServiceRequest::id() const {
  // @@protoc_insertion_point(field_get:tutorial.StartServiceRequest.id)
  return id_.GetNoArena();
}
inline void StartServiceRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.StartServiceRequest.id)
}
#if LANG_CXX11
inline void StartServiceRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.StartServiceRequest.id)
}
#endif
inline void StartServiceRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.StartServiceRequest.id)
}
inline void StartServiceRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.StartServiceRequest.id)
}
inline ::std::string* StartServiceRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.StartServiceRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartServiceRequest::release_id() {
  // @@protoc_insertion_point(field_release:tutorial.StartServiceRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartServiceRequest::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tutorial.StartServiceRequest.id)
}

// int32 sequence = 5;
inline void StartServiceRequest::clear_sequence() {
  sequence_ = 0;
}
inline ::google::protobuf::int32 StartServiceRequest::sequence() const {
  // @@protoc_insertion_point(field_get:tutorial.StartServiceRequest.sequence)
  return sequence_;
}
inline void StartServiceRequest::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:tutorial.StartServiceRequest.sequence)
}

// string source = 10;
inline void StartServiceRequest::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartServiceRequest::source() const {
  // @@protoc_insertion_point(field_get:tutorial.StartServiceRequest.source)
  return source_.GetNoArena();
}
inline void StartServiceRequest::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.StartServiceRequest.source)
}
#if LANG_CXX11
inline void StartServiceRequest::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.StartServiceRequest.source)
}
#endif
inline void StartServiceRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.StartServiceRequest.source)
}
inline void StartServiceRequest::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.StartServiceRequest.source)
}
inline ::std::string* StartServiceRequest::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.StartServiceRequest.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartServiceRequest::release_source() {
  // @@protoc_insertion_point(field_release:tutorial.StartServiceRequest.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartServiceRequest::set_allocated_source(::std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:tutorial.StartServiceRequest.source)
}

// string target = 11;
inline void StartServiceRequest::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartServiceRequest::target() const {
  // @@protoc_insertion_point(field_get:tutorial.StartServiceRequest.target)
  return target_.GetNoArena();
}
inline void StartServiceRequest::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.StartServiceRequest.target)
}
#if LANG_CXX11
inline void StartServiceRequest::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.StartServiceRequest.target)
}
#endif
inline void StartServiceRequest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.StartServiceRequest.target)
}
inline void StartServiceRequest::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.StartServiceRequest.target)
}
inline ::std::string* StartServiceRequest::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.StartServiceRequest.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartServiceRequest::release_target() {
  // @@protoc_insertion_point(field_release:tutorial.StartServiceRequest.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartServiceRequest::set_allocated_target(::std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:tutorial.StartServiceRequest.target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_StartServiceRequest_2eproto
